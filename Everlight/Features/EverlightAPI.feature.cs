// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Automation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Orders API")]
    public partial class OrdersAPIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "EverlightAPI.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Orders API", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add order using Orders API")]
        [NUnit.Framework.TestCaseAttribute("4567", "Test", "Auto", "8742", "USC", "301", "CT", "2002-11-11T12:12", null)]
        public virtual void AddOrderUsingOrdersAPI(string patientMRN, string patientFirstName, string patientLastName, string accessionNumber, string orgCode, string siteId, string modality, string studyDateTime, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("patientMRN", patientMRN);
            argumentsOfScenario.Add("patientFirstName", patientFirstName);
            argumentsOfScenario.Add("patientLastName", patientLastName);
            argumentsOfScenario.Add("AccessionNumber", accessionNumber);
            argumentsOfScenario.Add("OrgCode", orgCode);
            argumentsOfScenario.Add("SiteId", siteId);
            argumentsOfScenario.Add("Modality", modality);
            argumentsOfScenario.Add("StudyDateTime", studyDateTime);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add order using Orders API", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "patientMRN",
                            "patientFirstName",
                            "patientLastName",
                            "AccessionNumber",
                            "OrgCode",
                            "SiteId",
                            "Modality",
                            "StudyDateTime"});
                table7.AddRow(new string[] {
                            string.Format("{0}", patientMRN),
                            string.Format("{0}", patientFirstName),
                            string.Format("{0}", patientLastName),
                            string.Format("{0}", accessionNumber),
                            string.Format("{0}", orgCode),
                            string.Format("{0}", siteId),
                            string.Format("{0}", modality),
                            string.Format("{0}", studyDateTime)});
#line 4
 testRunner.Given("the user adds a new order using API with following data", ((string)(null)), table7, "Given ");
#line hidden
#line 7
 testRunner.Then("the order should be added with status code \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.And("verify the order exists using API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
 testRunner.And("delete the order using API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Order not added using Orders API")]
        [NUnit.Framework.TestCaseAttribute("", "Test", "Auto", "8742", "USC", "301", "CT", "2002-11-11T12:12", "Bad Request", null)]
        [NUnit.Framework.TestCaseAttribute("4567", "", "Auto", "8742", "USC", "301", "CT", "2002-11-11T12:12", "Bad Request", null)]
        [NUnit.Framework.TestCaseAttribute("4567", "Test", "", "8742", "USC", "301", "CT", "2002-11-11T12:12", "Bad Request", null)]
        public virtual void OrderNotAddedUsingOrdersAPI(string patientMRN, string patientFirstName, string patientLastName, string accessionNumber, string orgCode, string siteId, string modality, string studyDateTime, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("patientMRN", patientMRN);
            argumentsOfScenario.Add("patientFirstName", patientFirstName);
            argumentsOfScenario.Add("patientLastName", patientLastName);
            argumentsOfScenario.Add("AccessionNumber", accessionNumber);
            argumentsOfScenario.Add("OrgCode", orgCode);
            argumentsOfScenario.Add("SiteId", siteId);
            argumentsOfScenario.Add("Modality", modality);
            argumentsOfScenario.Add("StudyDateTime", studyDateTime);
            argumentsOfScenario.Add("error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order not added using Orders API", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "patientMRN",
                            "patientFirstName",
                            "patientLastName",
                            "AccessionNumber",
                            "OrgCode",
                            "SiteId",
                            "Modality",
                            "StudyDateTime"});
                table8.AddRow(new string[] {
                            string.Format("{0}", patientMRN),
                            string.Format("{0}", patientFirstName),
                            string.Format("{0}", patientLastName),
                            string.Format("{0}", accessionNumber),
                            string.Format("{0}", orgCode),
                            string.Format("{0}", siteId),
                            string.Format("{0}", modality),
                            string.Format("{0}", studyDateTime)});
#line 16
 testRunner.Given("the user adds a new order using API with following data", ((string)(null)), table8, "Given ");
#line hidden
#line 19
 testRunner.Then(string.Format("the order should not be added with API error \'{0}\'", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
